
/*rule SystemACL {
    description:  "System ACL to permit all access"
    participant: "org.hyperledger.composer.system.Participant"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}*/


// admin stuff
/*rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}*/



/*******************************************************************************************/
/*******************************************************************************************/

/*
 * Model: Permissions
 */

 // Transaction: GrantUnlock
rule OwnerCanGrantUnlockPermission {
  	description: "Only an owner can grant unlocks to other users"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.permissions.GrantUnlock"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeGrantUnlockPermission {
  	description: "Anyone can see the GrantUnlock Transaction"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.permissions.GrantUnlock"
    action: ALLOW
}

rule DenyGrantUnlockPermission {
  	description: "Deny the right to grant unlocks to everyone else"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.permissions.GrantUnlock"
    action: DENY
}

// Transaction: RevokeUnlock
rule OwnerCanRevokeUnlockPermission {
  	description: "Only an owner can revoke unlocks to other users"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.permissions.RevokeUnlock"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeRevokeUnlockPermission {
  	description: "Anyone can see the RevokeUnlock Transaction"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.permissions.RevokeUnlock"
    action: ALLOW
}

rule DenyRevokeUnlockPermission {
  	description: "Deny the right to grant unlocks to everyone else"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.permissions.RevokeUnlock"
    action: DENY
}

// Transaction: GrantAdmin
rule OwnerCanGrantUseradminPermission {
  	description: "Only an owner can grant the user admin permission to other users"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.permissions.GrantUseradmin"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeGrantUserdminPermission {
  	description: "Anyone can see the GrantUseradmin Transaction"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.permissions.GrantUseradmin"
    action: ALLOW
}

rule DenyGrantUseradminPermission {
  	description: "Deny the right to grant the user admin permission to everyone else"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.permissions.GrantUseradmin"
    action: DENY
}

// Transaction: RevokeAdmin
rule OwnerCanRevokeUseradminPermission {
  	description: "Only an owner can revoke the user admin permission to other users"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.permissions.RevokeUseradmin"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeRevokeUseradminPermission {
  	description: "Anyone can see the RevokeUseradmin Transaction"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.permissions.RevokeUseradmin"
    action: ALLOW
}

rule DenyRevokeUseradminPermission {
  	description: "Deny the right to revoke the user admin permission to everyone else"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.permissions.RevokeUseradmin"
    action: DENY
}

/*******************************************************************************************/

/*
 * Model: Lock
 */

 // Participant: Lock
rule OwnersCanUpdateTheLock {
    description: "owners can create, read, update and delete the lock"
    participant(u): "de.hftl.user.User"
    operation: ALL
    resource(l): "de.hftl.lock.Lock"
    condition: (u.role == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeTheLocks {
    description: "any participant can see the lock"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.lock.Lock"
    action: ALLOW
}

rule KeyHoldersCanUpdateTheLockUnlock {
  	description: "Only key holders can update the lock state to open while unlocking"
    participant(u): "de.hftl.user.User"
    operation: UPDATE
    resource(l): "de.hftl.lock.Lock"
    transaction(tx): "de.hftl.lock.Unlock"
    condition: (
        tx.lockKey.lock.getIdentifier() == tx.lock.getIdentifier()
        && tx.lock.getIdentifier() == l.getIdentifier()
        && l.state == "LOCKED"
        && u.keys.some(function (lockKey) {
            return lockKey.lock.getIdentifier() === l.getIdentifier();
        })
    )
    action: ALLOW
}

rule AnyUserCanCloseTheLock {
  	description: "Any user can close the lock if it is open"
    participant: "de.hftl.user.User"
    operation: UPDATE
    resource(l): "de.hftl.lock.Lock"
    transaction(tx): "de.hftl.lock.CloseLock"
    condition: (
        tx.lock.getIdentifier() == l.getIdentifier()
        && l.state == "UNLOCKED"
    )
    action: ALLOW
}

rule DenyLockModifications {
    description: "no one can modify the lock"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.lock.Lock"
    action: DENY
}

// Asset: LockKey
rule OwnerCanIssueLockKey {
    description: "owners can issue lock keys to users"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource(k): "de.hftl.lock.LockKey"
    transaction(tx): "de.hftl.permissions.GrantUnlock"
    condition: (
        u.UserRole == "OWNER"
    )
    action: ALLOW
}

rule AnyoneCanSeeTheKeys {
    description: "any participant can see all keys"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.lock.LockKey"
    action: ALLOW
}

rule DenyKeyModifications {
    description: "no one can modify or delete keys"
    participant: "de.hftl.**"
    operation: CREATE,UPDATE, DELETE
    resource: "de.hftl.lock.LockKey"
    action: DENY
}

// Transaction: Unlock
rule AnyUserCanSubmitUnlockTransactions {
    description: "any user in the network can submit an unlock transaction"
    participant: "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.lock.Unlock"
    action: ALLOW
}

rule AnyoneCanSeeUnlockTransactions {
    description: "any participant in the network can see unlock transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.lock.Unlock"
    action: ALLOW
}

rule DenyUnlockTransactionModifications {
    description: "no one can modify or delete unlock transactions"
    participant: "de.hftl.**"
    operation: UPDATE,DELETE
    resource: "de.hftl.lock.Unlock"
    action: DENY
}

// Tansaction: Lock
rule AnyUserCanSubmitCloseLockTransactions {
    description: "any user in the network can submit a closeLock transaction"
    participant: "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.lock.CloseLock"
    action: ALLOW
}

rule LockCanLockItself {
    description: "a lock can submit a lock transaction on itself"
    participant(l): "de.hftl.lock.Lock"
    operation: CREATE
    resource(cl): "de.hftl.lock.CloseLock"
    condition: (l.getIdentifier() == cl.lock.getIdentifier())
    action: ALLOW
}

rule AnyoneCanSeeCloselockTransactions {
    description: "any participant in the network can see CloseLock transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.lock.CloseLock"
    action: ALLOW
}

rule DenyCloseLockTransactionModifications {
    description: "no one can modify or delete CloseLock transactions"
    participant: "de.hftl.**"
    operation: CREATE,UPDATE,DELETE
    resource: "de.hftl.lock.CloseLock"
    action: DENY
}

/*******************************************************************************************/

/*
 * Model: User
 */

// Participant: User
rule VendorCanCreateAnInitialUser {
    description: "a vendor can create an initial user"
    participant: "de.hftl.vendor.Vendor"
    operation: CREATE
    resource: "de.hftl.user.User"
    transaction: "de.hftl.vendor.InitializeNetwork"
    action: ALLOW
}

rule AUserCanUpdateItself {
    description: "a user can update itself"
    participant(u): "de.hftl.user.User"
    operation: UPDATE
    resource(r): "de.hftl.user.User"
    condition: (u.getIdentifier() == r.getIdentifier())
    action: ALLOW
}

rule AnyoneCanSeeTheUsers {
    description: "anyone can see all users"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.user.User"
    action: ALLOW
}

rule OwnerCanAddUser {
    description: "an owner can add user"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.user.User"
    transaction: "de.hftl.admin.AddUser"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule OwnerCanRemoveUser {
    description: "an owner can remove users"
    participant(u): "de.hftl.user.User"
    operation: DELETE
    resource: "de.hftl.user.User"
    transaction: "de.hftl.admin.RemoveUser"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule DenyUserModifications {
    description: "no one can modify or delete users"
    participant: "de.hftl.**"
    operation: CREATE,UPDATE,DELETE
    resource: "de.hftl.user.User"
    action: DENY
}

/*******************************************************************************************/

/*
 * Model: Admin
 */

// Transaction: AddUser
rule OwnerCanAddUserTransaction {
    description: "an owner can add a user"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.admin.AddUser"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule VendorCanAddUserTransaction {
    description: "an vendor can add a user"
    participant: "de.hftl.vendor.Vendor"
    operation: CREATE
    resource: "de.hftl.admin.AddUser"
    action: ALLOW
}

rule AnyoneCanSeeAddUserTransactions {
    description: "anyone can see addUser transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.admin.AddUser"
    action: ALLOW
}

rule DenyAddUserTransactions {
    description: "no one can modify adduser transactions"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.admin.AddUser"
    action: DENY
}

// Transaction: RemoveUser
rule OwnerCanRemoveUserTransaction {
    description: "an owner can remove a user"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.admin.RemoveUser"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeRemoveUserTransactions {
    description: "anyone can see RemoveUser transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.admin.RemoveUser"
    action: ALLOW
}

rule DenyRemoveUserTransactions {
    description: "no one can modify removeuser transactions"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.admin.AddUser"
    action: DENY
}


/*******************************************************************************************/

/*
 * Model: Vendor
 */

// Participant: Vendor
rule AnyoneCanSeeTheVendor {
    description: "anyone can see the vendor"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.vendor.Vendor"
    action: ALLOW
}

rule NetworkAdminCanCreateAVendor {
    description: "a network admin can administrate a vendor"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "de.hftl.vendor.Vendor"
    action: ALLOW
}

rule DenyVendorModifications {
    description: "no one can modify a vendor"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.vendor.Vendor"
    action: DENY
}

// Transaction: RegisterLock
rule OwnerCanRegisterLock {
    description: "an owner can register a lock"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.vendor.RegisterLock"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeRegisterLockTransactions {
    description: "anyone can see RegisterLock transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.vendor.RegisterLock"
    action: ALLOW
}

rule DenyRegisterLockTransactions {
    description: "no one can modify registerlock transactions"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.vendor.RegisterLock"
    action: DENY
}


// Transaction: ResetLock
rule OwnerCanResetLock {
    description: "an owner can reset a lock"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.vendor.ResetLock"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeResetLockTransactions {
    description: "anyone can see RegsetLock transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.vendor.ResetLock"
    action: ALLOW
}

rule DenyResetLockTransactions {
    description: "no one can modify ResetLock transactions"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.vendor.ResetLock"
    action: DENY
}

// Transaction: RemoveLock
rule OwnerCanRemoveLock {
    description: "an owner can remove a lock"
    participant(u): "de.hftl.user.User"
    operation: CREATE
    resource: "de.hftl.vendor.RemoveLock"
    condition: (u.UserRole == "OWNER")
    action: ALLOW
}

rule AnyoneCanSeeRemoveLockTransactions {
    description: "anyone can see RemoveLock transactions"
    participant: "de.hftl.**"
    operation: READ
    resource: "de.hftl.vendor.RemoveLock"
    action: ALLOW
}

rule DenyRemoveLockTransactions {
    description: "no one can modify RemoveLock transactions"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.vendor.RemoveLock"
    action: DENY
}

// Transaction: InitializeNetwork
rule VendorCanInitializeNetwork {
    description: "a vendort can initialize a network"
    participant: "de.hftl.vendor.Vendor"
    operation: CREATE
    resource: "de.hftl.vendor.InitializeNetwork"
    action: ALLOW
}

rule DenyInitializeNetworkTransactions {
    description: "no one can CRUD InitializeNetworkTransactions"
    participant: "de.hftl.**"
    operation: ALL
    resource: "de.hftl.vendor.InitializeNetwork"
    action: DENY
}
